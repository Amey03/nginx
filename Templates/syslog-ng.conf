@version: 3.36

###
# Global Options
###
options { chain_hostnames(0); flush_lines(0); use_dns(no); dns_cache(no); use_fqdn(no); log_msg_size(10485760);
          owner("root"); group("adm"); perm(0640); stats_freq(0);
};

###
# Sources
###
source s_src {
    unix-dgram("/dev/log");
    internal();
    file("/var/log/newrelic/php-agent.log"); # Adjust as needed for your setup
};

###
# Templates
###
template t_basic { template("$LEVEL: $MSGHDR$(indent-multi-line ${MESSAGE})\n"); };
template t_raw { template("${MESSAGE}\n"); };

###
# Filters
###
filter f_info { level(debug..warn); };
filter f_err { level(err..emerg); };

filter f_syslogng { program("syslog-ng") and message("underlying file is a FIFO, it should be used by pipe()"); };
filter f_system { facility(auth, authpriv, cron, mail); };

filter f_exclude { not filter(f_syslogng) and not filter(f_system); };

filter f_stdout { filter(f_info) and filter(f_exclude); };
filter f_stderr { filter(f_err) and filter(f_exclude); };

###
# Destinations
###
{{ $template := getenv "CONTAINER_SYSLOG_TEMPLATE" "t_basic" -}}
destination d_stdout { file("/dev/stdout" template({{ $template }})); };
destination d_stderr { file("/dev/stderr" template({{ $template }})); };
{{ $remote := getenv "CONTAINER_SYSLOG_REMOTE_HOST" "none"  }}{{ if ne $remote "none" }}
destination d_remote { {{ getenv "CONTAINER_SYSLOG_REMOTE_PROTO" "udp" }}("{{ $remote }}" port({{ getenv "CONTAINER_SYSLOG_REMOTE_PORT" "514" }})); };
{{ end }}

###
# Log paths
###
{{ $remoteOnly := getenv "CONTAINER_SYSLOG_REMOTE_ONLY" "false" }}
{{ if ne $remoteOnly "true" }}
log { source(s_src); filter(f_stdout); destination(d_stdout); };
log { source(s_src); filter(f_stderr); destination(d_stderr); };
{{ end }}
{{ if ne $remote "none" }}
log { source(s_src); filter(f_exclude); destination(d_remote); };
{{ end }}

###
# Include all config files in /etc/syslog-ng/conf.d/
###
@include "/etc/syslog-ng/conf.d/*.conf"